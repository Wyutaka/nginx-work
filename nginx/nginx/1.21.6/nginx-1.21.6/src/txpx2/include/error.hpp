// auto generated by generate_cassandra_bytes.py

#pragma once

#include <txpx2/types.hpp>

namespace txpx2 {

struct Error {
  static constexpr Byte kServerError[] = {
      static_cast<Byte>(0x0),  static_cast<Byte>(0x0),
      static_cast<Byte>(0x0),  static_cast<Byte>(0x0),
      static_cast<Byte>(0x0),  static_cast<Byte>(0xc),
      static_cast<Byte>(0x73), static_cast<Byte>(0x65),
      static_cast<Byte>(0x72), static_cast<Byte>(0x76),
      static_cast<Byte>(0x65), static_cast<Byte>(0x72),
      static_cast<Byte>(0x20), static_cast<Byte>(0x65),
      static_cast<Byte>(0x72), static_cast<Byte>(0x72),
      static_cast<Byte>(0x6f), static_cast<Byte>(0x72)};
  static constexpr Byte kProtocolError[] = {
      static_cast<Byte>(0x0),  static_cast<Byte>(0x0),  static_cast<Byte>(0x0),
      static_cast<Byte>(0xa),  static_cast<Byte>(0x0),  static_cast<Byte>(0xe),
      static_cast<Byte>(0x70), static_cast<Byte>(0x72), static_cast<Byte>(0x6f),
      static_cast<Byte>(0x74), static_cast<Byte>(0x6f), static_cast<Byte>(0x63),
      static_cast<Byte>(0x6f), static_cast<Byte>(0x6c), static_cast<Byte>(0x20),
      static_cast<Byte>(0x65), static_cast<Byte>(0x72), static_cast<Byte>(0x72),
      static_cast<Byte>(0x6f), static_cast<Byte>(0x72)};
  static constexpr Byte kAuthenticationError[] = {
      static_cast<Byte>(0x0),  static_cast<Byte>(0x0),  static_cast<Byte>(0x1),
      static_cast<Byte>(0x0),  static_cast<Byte>(0x0),  static_cast<Byte>(0x14),
      static_cast<Byte>(0x61), static_cast<Byte>(0x75), static_cast<Byte>(0x74),
      static_cast<Byte>(0x68), static_cast<Byte>(0x65), static_cast<Byte>(0x6e),
      static_cast<Byte>(0x74), static_cast<Byte>(0x69), static_cast<Byte>(0x63),
      static_cast<Byte>(0x61), static_cast<Byte>(0x74), static_cast<Byte>(0x69),
      static_cast<Byte>(0x6f), static_cast<Byte>(0x6e), static_cast<Byte>(0x20),
      static_cast<Byte>(0x65), static_cast<Byte>(0x72), static_cast<Byte>(0x72),
      static_cast<Byte>(0x6f), static_cast<Byte>(0x72)};
  static constexpr Byte kOverloaded[] = {
      static_cast<Byte>(0x0),  static_cast<Byte>(0x0),  static_cast<Byte>(0x10),
      static_cast<Byte>(0x1),  static_cast<Byte>(0x0),  static_cast<Byte>(0xa),
      static_cast<Byte>(0x6f), static_cast<Byte>(0x76), static_cast<Byte>(0x65),
      static_cast<Byte>(0x72), static_cast<Byte>(0x6c), static_cast<Byte>(0x6f),
      static_cast<Byte>(0x61), static_cast<Byte>(0x64), static_cast<Byte>(0x65),
      static_cast<Byte>(0x64)};
  static constexpr Byte kIsBootstrapping[] = {
      static_cast<Byte>(0x0),  static_cast<Byte>(0x0),  static_cast<Byte>(0x10),
      static_cast<Byte>(0x2),  static_cast<Byte>(0x0),  static_cast<Byte>(0x10),
      static_cast<Byte>(0x69), static_cast<Byte>(0x73), static_cast<Byte>(0x20),
      static_cast<Byte>(0x62), static_cast<Byte>(0x6f), static_cast<Byte>(0x6f),
      static_cast<Byte>(0x74), static_cast<Byte>(0x73), static_cast<Byte>(0x74),
      static_cast<Byte>(0x72), static_cast<Byte>(0x61), static_cast<Byte>(0x70),
      static_cast<Byte>(0x70), static_cast<Byte>(0x69), static_cast<Byte>(0x6e),
      static_cast<Byte>(0x67)};
  static constexpr Byte kTruncateError[] = {
      static_cast<Byte>(0x0),  static_cast<Byte>(0x0),  static_cast<Byte>(0x10),
      static_cast<Byte>(0x3),  static_cast<Byte>(0x0),  static_cast<Byte>(0xe),
      static_cast<Byte>(0x74), static_cast<Byte>(0x72), static_cast<Byte>(0x75),
      static_cast<Byte>(0x6e), static_cast<Byte>(0x63), static_cast<Byte>(0x61),
      static_cast<Byte>(0x74), static_cast<Byte>(0x65), static_cast<Byte>(0x20),
      static_cast<Byte>(0x65), static_cast<Byte>(0x72), static_cast<Byte>(0x72),
      static_cast<Byte>(0x6f), static_cast<Byte>(0x72)};
  static constexpr Byte kSyntaxError[] = {
      static_cast<Byte>(0x0),  static_cast<Byte>(0x0),
      static_cast<Byte>(0x20), static_cast<Byte>(0x0),
      static_cast<Byte>(0x0),  static_cast<Byte>(0xc),
      static_cast<Byte>(0x73), static_cast<Byte>(0x79),
      static_cast<Byte>(0x6e), static_cast<Byte>(0x74),
      static_cast<Byte>(0x61), static_cast<Byte>(0x78),
      static_cast<Byte>(0x20), static_cast<Byte>(0x65),
      static_cast<Byte>(0x72), static_cast<Byte>(0x72),
      static_cast<Byte>(0x6f), static_cast<Byte>(0x72)};
  static constexpr Byte kUnauthorized[] = {
      static_cast<Byte>(0x0),  static_cast<Byte>(0x0),
      static_cast<Byte>(0x21), static_cast<Byte>(0x0),
      static_cast<Byte>(0x0),  static_cast<Byte>(0xc),
      static_cast<Byte>(0x75), static_cast<Byte>(0x6e),
      static_cast<Byte>(0x61), static_cast<Byte>(0x75),
      static_cast<Byte>(0x74), static_cast<Byte>(0x68),
      static_cast<Byte>(0x6f), static_cast<Byte>(0x72),
      static_cast<Byte>(0x69), static_cast<Byte>(0x7a),
      static_cast<Byte>(0x65), static_cast<Byte>(0x64)};
  static constexpr Byte kInvalid[] = {
      static_cast<Byte>(0x0),  static_cast<Byte>(0x0),  static_cast<Byte>(0x22),
      static_cast<Byte>(0x0),  static_cast<Byte>(0x0),  static_cast<Byte>(0x7),
      static_cast<Byte>(0x69), static_cast<Byte>(0x6e), static_cast<Byte>(0x76),
      static_cast<Byte>(0x61), static_cast<Byte>(0x6c), static_cast<Byte>(0x69),
      static_cast<Byte>(0x64)};
  static constexpr Byte kConfigError[] = {
      static_cast<Byte>(0x0),  static_cast<Byte>(0x0),
      static_cast<Byte>(0x23), static_cast<Byte>(0x0),
      static_cast<Byte>(0x0),  static_cast<Byte>(0xc),
      static_cast<Byte>(0x63), static_cast<Byte>(0x6f),
      static_cast<Byte>(0x6e), static_cast<Byte>(0x66),
      static_cast<Byte>(0x69), static_cast<Byte>(0x67),
      static_cast<Byte>(0x20), static_cast<Byte>(0x65),
      static_cast<Byte>(0x72), static_cast<Byte>(0x72),
      static_cast<Byte>(0x6f), static_cast<Byte>(0x72)};
  static constexpr Byte kUnprepared[] = {
      static_cast<Byte>(0x0),  static_cast<Byte>(0x0),  static_cast<Byte>(0x25),
      static_cast<Byte>(0x0),  static_cast<Byte>(0x0),  static_cast<Byte>(0xa),
      static_cast<Byte>(0x75), static_cast<Byte>(0x6e), static_cast<Byte>(0x70),
      static_cast<Byte>(0x72), static_cast<Byte>(0x65), static_cast<Byte>(0x70),
      static_cast<Byte>(0x61), static_cast<Byte>(0x72), static_cast<Byte>(0x65),
      static_cast<Byte>(0x64)};
};

}  // namespace txpx2
